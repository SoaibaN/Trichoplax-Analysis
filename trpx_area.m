clc
clear all


% Scale bar 
% 1752 px= 10mm
% 1px= 10/1752 mm


% step 1

% cleaning up binary data and extracting area and centroid for various
% animals

% Specify the folder containing the raw images
imageFolder = 'F:\Trichoplax project\Experiment\Trpx area\Analysis\Matlab\April2025\29April2025\Edited';

% Get a list of all image files in the folder
imageFiles = dir(fullfile(imageFolder, '*.tif')); % Adjust extension if needed (e.g., *.png, *.tif)

% Create a cell array to store images
Images = cell(1, length(imageFiles));

% Create a cell array for Binary images
BI = cell(1, length(imageFiles));

BIC= cell(1,length(imageFiles)); % for storing noised cleaned Binary images

output1='F:\Trichoplax project\Experiment\Trpx area\Analysis\Matlab\April2025\29April2025\BI';
output2='F:\Trichoplax project\Experiment\Trpx area\Analysis\Matlab\April2025\29April2025\BIC';

% Loop through each image file
for i = 1:length(imageFiles)
    % Construct the full file path
    imagePath = fullfile(imageFolder, imageFiles(i).name);

    % Load the image
    Image = imread(imagePath);

    % Store the image
    Images{i} = Image;
    % imshow(Images{i});
    % pause(0.1);
    Binary=imbinarize(Images{i});
    BI{i}=Binary;
    % imshow(BI{i});
    output_filename1 = fullfile(output1, sprintf('BI_%d.png', i));
    imwrite(BI{i}, output_filename1);
    BIC{i} = bwareaopen(BI{i},200 ); % Remove small noise (objects smaller than x pixels)
    imshow(BIC{i});
    pause(0.1);
    output_filename2 = fullfile(output2, sprintf('BIC_%d.png', i));
    imwrite(BIC{i}, output_filename2);
end

%% 

% Analyzing cleaned binary images (BIC) to extract area and other
% parameters
numFrames = length(BIC); % Total number of frames
statsArray = cell(1, numFrames); % Preallocate a cell array
A=[]; % area
Cir=[]; % Circularity
Cent=[]; %Centroid
Centx=[]; % Centroid x
Centy=[]; % Centroid y
N = NaN(1,numFrames);

for i = 1:numFrames
    statsArray{i} = regionprops(BIC{i}, 'Area','Circularity','Centroid','PixelList'); % Compute region properties
    N(1,i)=length(statsArray{i});
    A(1:N(1,i),i)=vertcat(statsArray{1,i}.Area);
    Cir(1:N(1,i),i)=vertcat(statsArray{1,i}.Circularity);
    % Cent{i} = vertcat(statsArray{i}.Centroid);
    % Centx(1:N(1,i),i)=vertcat((Cent{1,i})(:,1));
    Cent{i} = vertcat(statsArray{i}.Centroid);  % Nx2 matrix
    Centx(1:N(1,i),i) = Cent{i}(:,1);  % Extract X-coordinates
    Centy(1:N(1,i),i) = Cent{i}(:,2);  % Extract Y-coordinates
end

%% 

% Analyzing data generated by trackmate ImageJ

XL=xlsread("trpx_30s_1hr_0.4x_1.6x_1.csv");
M= max(XL(:, 2)); % Maximum in column 2
L=length(XL);
P = cell(1, M+1); % Create a 1Ã—N cell array
Rows=[];

for i=1:M+1
    S = NaN(numFrames,1);
    R=find(XL(:,2)== i-1);% finding row number where those numbers exist (like 0,1,2..)
    for j = 1:1:size(R,1)
        S(j,1) = R(j,1);
    end
    Rows=[Rows,S]; %adding S in empty Rows 
    
end

for m=1:M+1
    for n=1:numFrames
        if ~isnan(Rows(n,m))  % finding non NAN values
            P{1,m}(n,1)=XL(Rows(n,m),2); % picking particle numbers
            P{1,m}(n,2)=XL(Rows(n,m),4); % x coordinate
            P{1,m}(n,3)=XL(Rows(n,m),5); % y coordinate
            P{1,m}(n,4)=XL(Rows(n,m),7); % frames
        end
    end
end

%%

% generating trajectories for all animals together which are in all frames
% and neglecting the which comes in middle or goes out of frame



PA = cell(1,m);
PC=  cell(1,m);
Cx=cell(1,m);
Cy=cell(1,m);

for i=1:m  %number of particles
    if length(P{1,i})==n % number of total complete frames
        for j=1:n
            x0=P{1,i}(j,2); % x coordinate from ImageJ data(centroid)
            y0=P{1,i}(j,3); % y coordinate from ImageJ data(centroid)
            for k=1:size(Centx,1)
                if abs(Centx(k,j)-x0)<20 & abs(Centy(k,j)-y0)<20;
                    area=A(k,j);
                    PA{1,i}(j,1)=area;
                    cir = Cir(k,j);
                    PC{1,i}(j,1)=cir;
                    centerx=Centx(k,j);
                    Cx{1,i}(j,1)=centerx;
                    centery=Centy(k,j);
                    Cy{1,i}(j,1)=centery;
                end
            end
        end
    end
end

colors = lines(m);
% colors=jet(m);

figure(1); % trajectory for particle 
hold on;

for i = 1:m
    if ~isempty(Cx{1,i}) && ~isempty(Cy{1,i}) %  picking non empty arrays
        plot(Cx{1,i}*0.00571, -Cy{1,i}*0.00571,'Color', colors(i,:), 'LineWidth', 1.5);

    end
end


figure(2);% Area vs time for all (which exists for 121 frames)
hold on;
for i=1:m
    if ~isempty(PA{1,i})  %  picking non empty arrays
        t = length(PA{1,i});
        timeVec = (0:t-1).' * 0.5; 
        plot(timeVec,PA{1,i}*32.6*1e-6,'Color', colors(i,:), 'LineWidth', 1.5); % area=[mm^2]

    end

end
hold off
% 



figure(3); % Circulaty vs time for all 
hold on;
for i=1:m
    if ~isempty(PC{1,i}) %  picking non empty arrays
        t = length(PA{1,i});
        timeVec = (0:t-1).' * 0.5;
        plot(timeVec,PC{1,i},'Color', colors(i,:), 'LineWidth', 1.5);
    end

end
hold off

%% 

% speed 

ux = cell(1,m); % velocity in x
uy = cell(1,m); % velocity in y
speed = cell(1,m); % speed
for i=1:m
    if ~isempty(Cx{1,i})
        for j=1:length(Cx{1,i})-1
            u=Cx{1,i}(j+1,1)-Cx{1,i}(j,1);
            ux{1,i}(j,1)=u;
            v=Cy{1,i}(j+1,1)-Cy{1,i}(j,1);
            uy{1,i}(j,1)=v;
            s=sqrt(u*u +v*v);
            speed{1,i}(j,1)=s;% not in correct unit yet
        end
    end
end

figure(4); % speed vs time for all 
hold on;
for i=1:m
    if ~isempty(speed{1,i}) %  picking non empty arrays
        t = length(speed{1,i});
        timeVec = (0:t-1).' * 0.5;
        plot(timeVec,speed{1,i}*(0.00571)/30,'Color', colors(i,:), 'LineWidth', 1.5); % speed=[mm/sec]
    end

end
hold off


%%
% generating area and speed for just two particles
figure (5);
plot(PA{1,1},'r');

figure(6)
plot(speed{1,1},'r');

figure (7);
plot(PA{1,2},'b');

figure(8)
plot(speed{1,2},'b');

%%

% Generating individual area and speed plots for each animal

for i=1:m
    if ~isempty(PA{1,i}) %  picking non empty arrays
        figure(i);
        plot(PA{1,i}*32.6*1e-6,'Color', colors(i,:), 'LineWidth', 1.5);
        title('Area vs time');
    end

end
hold off

for i=1:m
    if ~isempty(speed{1,i}) %  picking non empty arrays
        figure(i+m);
        plot(speed{1,i}*0.00571,'Color', colors(i,:), 'LineWidth', 1.5 );
        title('Speed vs time');
    end

end
hold off

%%

% Detect Peaks

% signal1=speed{1,1};
% signal1x=0:length(speed{1,1})-1;

% [peaks, locs] = findpeaks(signal1, signal1x);  % 't' is your time vector
% peakIntervals = diff(locs);  % time between consecutive peaks

signal = speed{1,1};;  % Replace with your data
t = 0:length(speed{1,1})-1;         % Replace with your time vector

% A basic peak finder
peaks_idx = find(signal(2:end-1) > signal(1:end-2) & signal(2:end-1) > signal(3:end));
peaks_idx = peaks_idx + 1;  % Adjust index

peaks = signal(peaks_idx);
locs = t(peaks_idx);

% Plot it!
plot(t, signal);
hold on;
plot(locs, peaks, 'r*', 'MarkerSize', 8);
title('Detected Peaks (without findpeaks)');

%%

% Area change and  speed correlation

AC = cell(1,m); % Area change
for i=1:m
    if ~isempty(PA{1,i})
        for j=1:length(PA{1,i})-1
            areachange=PA{1,i}(j+1,1)-PA{1,i}(j,1);
            AC{1,i}(j,1)=areachange;
        end
    end
end


for i=1:m
    if ~isempty(AC{1,i}) %  picking non empty arrays
        figure(i);
        scatter(AC{1,i},speed{1,i},'Color', colors(i,:), 'LineWidth', 1.5);
        title('Speed vs area change');
    end

end
hold off

%%

for i=1:m
    if ~isempty(PA{1,i}) %  picking non empty arrays
        figure(i);
        scatter(PA{1,i}(2:end),speed{1,i},'Color', colors(i,:), 'LineWidth', 1.5);
        title('Speed vs Area');
        
    end

end
hold off


%% 

% speed 

al = cell(1,m); % acceleration

for i=1:m
    if ~isempty(speed{1,i})
        for j=1:length(speed{1,i})-1
            aclrn=speed{1,i}(j+1,1)-speed{1,i}(j,1);
            al{1,i}(j,1)=aclrn;
        end
    end
end

colors = lines(m);
figure(4); % accleration vs change in area
hold on;
for i=1:m
    if ~isempty(al{1,i}) %  picking non empty arrays
        figure(i);
        scatter(AC{1,i}(2:end),al{1,i},'Color', colors(i,:), 'LineWidth', 1.5);
        title('Acceleration vs area change ');
    end

end
hold off
%%

% Aceleration with time
colors = lines(m);
figure(4); % 
hold on;
for i=1:m
    if ~isempty(al{1,i}) %  picking non empty arrays
        figure(i);
        plot(al{1,i},'Color', colors(i,:), 'LineWidth', 1.5);
        title('Acceleration vs area change ');
    end

end
hold off

%%

writecell(speed, 'speedN4.xlsx');
writecell(PA, 'areaN4.xlsx');
%%

% Generating Subplots for individual area and speed plots for each animal

nonEmptyIdx = find(~cellfun(@isempty, PA));% finding whch indices are non empty in area
L=length(nonEmptyIdx);

for i=1:m
    if ~isempty(PA{1,i}) %  picking non empty arrays
        subplot(2, L, i);
        plot(PA{1,i}*32.6*1e-6,'Color', colors(i,:), 'LineWidth', 1.5);
        %title('Area vs time');
    end

end
hold off


for i=1:m
    if ~isempty(speed{1,i}) %  picking non empty arrays
        subplot(2, L, i + L);
        plot(speed{1,i}*0.00571,'Color', colors(i,:), 'LineWidth', 1.5 );
        %title('Speed vs time');
    end

end
hold off
%%

% Fourier Transformation
y2=speed{1,4}; 

F2 = fft(y2);


fs = 1/30; % 
f = (0:length(F2)-1)*fs/length(F2);

plot(f,abs(F2))
xlabel('Frequency (Hz)')
ylabel('Magnitude')
title('Magnitude')